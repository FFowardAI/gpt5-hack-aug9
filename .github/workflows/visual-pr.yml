name: Visual PR Comment

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  post-visual-diff:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for visual changes
        id: check_changes
        run: |
          # Check if there are changes in qa/generated or qa/reports
          if git diff --name-only HEAD~1 HEAD | grep -E '^qa/(generated|reports)/' > /dev/null; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Push images to preview branch (for inline display)
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          # Create a preview branch with images (not LFS) for inline display
          PREVIEW_BRANCH="pr-preview-${{ github.event.number }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create/checkout preview branch
          git checkout -B "$PREVIEW_BRANCH"
          
          # Copy images to preview location (bypass LFS)
          mkdir -p qa/preview/baselines qa/preview/generated
          cp -r qa/baselines/* qa/preview/baselines/ 2>/dev/null || true
          cp -r qa/generated/* qa/preview/generated/ 2>/dev/null || true
          
          # Add without LFS
          git add qa/preview/
          git commit -m "Preview images for PR #${{ github.event.number }}" || true
          git push origin "$PREVIEW_BRANCH" --force

      - name: Post PR comment with visual diff
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read the generated markdown report if it exists
            let reportContent = '';
            const reportPath = 'qa/reports/visual-diff.md';
            if (fs.existsSync(reportPath)) {
              reportContent = fs.readFileSync(reportPath, 'utf8');
            }
            
            // Get list of generated images
            const generatedDir = 'qa/generated';
            let imagesList = '';
            if (fs.existsSync(generatedDir)) {
              const files = fs.readdirSync(generatedDir, { recursive: true })
                .filter(f => f.endsWith('.png'))
                .slice(0, 10); // Limit to 10 images for PR comment
              
              if (files.length > 0) {
                imagesList = '\n## Visual Changes\n\n';
                for (const file of files) {
                  const relativePath = `qa/generated/${file}`;
                  const baselinePath = `qa/baselines/${file}`;
                  
                  imagesList += `### ${file}\n\n`;
                  
                  // Create URLs for inline image display from preview branch
                  const previewBranch = `pr-preview-${context.issue.number}`;
                  const baselineUrl = `https://raw.githubusercontent.com/${context.repo.owner}/${context.repo.repo}/${previewBranch}/qa/preview/baselines/${file}`;
                  const generatedUrl = `https://raw.githubusercontent.com/${context.repo.owner}/${context.repo.repo}/${previewBranch}/qa/preview/generated/${file}`;
                  
                  imagesList += `**Before (baseline):**\n`;
                  imagesList += `![baseline](${baselineUrl})\n\n`;
                  imagesList += `**After (generated):**\n`;
                  imagesList += `![generated](${generatedUrl})\n`;
                  imagesList += '---\n\n';
                }
              }
            }
            
            // Combine report content and images
            const fullComment = `## ðŸŽ¨ Visual Testing Results\n\n${reportContent}\n${imagesList}\n\n_Generated by GPT-5 Visual QA System_`;
            
            // Post comment
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: fullComment
            });

      - name: Clean up generated files (optional)
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          # Optionally remove generated files after posting to PR
          # Uncomment if you don't want to commit generated files
          # git rm -rf qa/generated qa/reports
          # git commit -m "chore: clean up generated visual test files" || true
          echo "Generated files kept in repo for reference"
